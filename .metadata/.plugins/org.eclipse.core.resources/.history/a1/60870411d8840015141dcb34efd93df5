//============================================================================
// DESCRIPTION : Program 12, CharSort & Search w/Dynamic Pointers
// CLASS       : COSC 1436.S01
// AUTHOR      : Matthew Dowell
// DATE        : 10/28/2015
//============================================================================

/* Sort (char * Names[])  // we are comparing an array of pointer locations,  Not an array, this allows us
 * 						//to effectively manipulate multi-dimensional arrays because we do not need to be specific
 * 						//about the multiple dimensions.
 * 	{ char* Temp;
 * 	if (strcmp (Names [i], Names [i++]))
 * 		{Temp = Names [i];
 * 		}
 *
 *char * Temp;
 * if ((strcmp (Names [i], Names [i + 1]) > 0))
 * 		{
 * 		Temp = Names [i],
 * 		Names [i] = Names [i + 1];
 * 		Names [i + 1] = Temp;
 *
 *
 *
 *
 */

	#include "ReadString.h"
	#include <stdlib.h>
	#include <iostream>
	#include <string.h>

	using namespace std;

	int main() {

			const int MaxSize = 20; //Initial size guess for our char *pArray
			int CurrentSize = 0;
			int NamesCounter = 0; //tracks number of names(slots) needed for our dynamic array.
			bool Test = true;
			char *pArray [NamesCounter]; //creates a pointer array with {x} number of slots.
			char *pTempArray;
			CurrentSize = MaxSize; //
			//String 		= new char [CurrSize +1]; // +1 for the "End of String" mark.

		/*
			char Name;

			int Validation = 0;
			int i = 0;
			char **pTempArray; //a temporary array to
		*/


	cout << "Enter names to sort: " << endl;


	//-----------------------------Loop to input our names, is dynamic based on how many rows chosen------------------------
		do{

						if (NamesCounter >= CurrentSize) {
									cout << "Your array grew" << endl;
									CurrentSize = CurrentSize + MaxSize;  // increase the previous size with our constant int.
									pTempArray = new char [CurrentSize]; // create new bigger array.
									for (int i=0; i<NamesCounter; i++) //
										{
										memcpy(pTempArray, pArray, CurrentSize * sizeof (char *));
										//pTempArray[i] = pArray[i];       // copy values to new array.
										}
									delete [] pArray;              // free old array memory.
									pArray = pTempArray;                 // now a points to new array.
									}
					/*
						if (CurrNumChars >= CurrSize)  // is the array full?
										{			// Yes, I need a bigger array
											CurrSize += FirstGuess;
											TempString = new char [CurrSize + 1];
											//stingcopy won't work, because we haven't used an end of string mark to judge the size
											memcpy (TempString, String, CurrNumChars); //copies string Chars to TempString
											delete [] String;  //data is not needed now so we are giving it back to the system.
																// String still contains a memory address, we dont "own" that location anymore.
																//IF YOU DONT DELETE THE ALLOCATED MEMORY YOU WILL HAVE a memory leak RESOURCE FAILURE.
											String = TempString; //not moving any characters
										}

					*/



			cout << ">";
			pArray [NamesCounter] = ReadString(); //Asks for a Name & Returns Either a Name "B'I'L'L'\0" or simply returns '\0' if Enter Key is pressed.
			cout << "You Entered: " << pArray [NamesCounter];

				if (pArray[NamesCounter][0] =='\0')
				{
				Test = false;
				}
				else
				{
				NamesCounter++;
				}
		cout << endl;



		}while(Test == true) ; // if '\0' is returned in the first character from ReadString, We know only the ENTER was pressed.

				//	if (i == 20)
				//	 memcpy(pTempArray, pArray, Max * sizeof (char *));





	cout << "Unsorted names are " << endl;
					for (int i = 0; i < NamesCounter; i++)
					{
					cout << pArray [i] << ", ";
					}
					cout << endl;
	//---------------------------------------pArray is now Full and ready to input into **Dynamic Array-------------------

		//pNameArray = new char * [Rows]; //creating the dimension of our pointer array.


	return 0;
	}

