//============================================================================
// Name        : Project.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================


#include <iostream>
using namespace std;

#include "Party.h"
#include "ReadInt.h"
#include "ReadString.h"
#include "Plane.h"
#include "Commands.h"

void InitPlane (Plane &, int, char *); // prototype  '&' allows us to pass the STRUCTURE itself to change it. Rather than a single value.
void Display (Plane &);
void FlyPlane (Plane &);


int main() {


	Plane Lounge;
	Plane Alpha;
	Plane Bravo;
	Planes Which;

	Party party;
	Party tooBigParty;
	Plane plane;
	Plane tempLounge; //place to que parties that should go to the front of the line.
	int selection;


	const int PlanesArraySize = NumPlanes;
	Plane PlanesArray [PlanesArraySize];

	int Size;

	bool ShutdownLoop = false;
	bool Flown = false;

	char Test; // For testing automatic triggers.




cout << "Tree Top TICKE.TRON ACTIVATED... " << endl;
Size = 5;
InitPlane (Alpha, Size, "Alpha");
PlanesArray[PlaneAlpha] = Alpha;

Size = 20;
InitPlane (Bravo, Size, "Bravo");
PlanesArray[PlaneBravo] = Bravo;

Size = 10;
InitPlane (Lounge, Size, "Lounge");
cout << endl;

Display(Alpha);
Display(Bravo);
Display(Lounge);

do{
cout << "Input Command >";
	//Switch to handle the questions (Which Plane, Which Party, Which
	switch (GetCommand())
		{
		case CmdAlpha:
			cout << "Enter Plane Alpha Seating Size> ";
			Size = ReadInt ();
			InitPlane (Alpha, Size, "Alpha");
							/*  REPLACED BY INIT PLANE FUNCTIONS
								Alpha.NumSeats = Size;
								Alpha.NumEmpty = Size; //first time I show up, all the seats are empty.
								Alpha.NumParties = 0;
								Alpha.Parties =  new Party [Size]; //dynamic array of parties, maximum number of parties we can have is "Size".
								*/
			cout << endl;
			cout << "Alpha now has: ";
			Display(Alpha);
			PlanesArray[PlaneAlpha] = Alpha;

			break;
		case CmdBravo:
			cout << "Enter Bravo Seating Size> ";
					Size = ReadInt ();
					InitPlane (Bravo,  Size, "Bravo");
					cout << endl;
					cout << "Bravo now has: ";
					Display(Bravo);
					PlanesArray[PlaneBravo] = Bravo;

						break;
		case CmdLounge:
			cout << "Enter Lounge Seating Size> ";
					Size = ReadInt ();
					InitPlane (Lounge,  Size, "Lounge");
					cout << endl;
					cout << "Bravo now has: ";
					Display(Bravo);
						break;
		case CmdFly:
				cout << "Which Plane do you want to fly? >";
				Which = GetPlane (); //Get which plane we are flying
				plane = PlanesArray [Which];
				FlyPlane (plane);
				PlanesArray [Which] = plane; //reassigning plane to Array, because it was reinitialized.

				//Loop that flies that plane
					//Print names of all parties on board
					//Delete the names of each party on board free up our dynamic memory. (delete [] ?Array)
					//Set number of parties on plane to 0
					//Set number of empty seats on to max value (NumSeats) of plane.

				Flown = true;

				break;
		case CmdArrive:
				cout << "Which Plane do you want to board? >";
				do{
				Which = GetPlane (); //assigns party to plane (identified in array because it's difficult to target a single struct entity.
					if (Which == -1){
					cout << "Invalid Plane, try again. >" << endl;
					}else;
				}while(Which == -1);

				cout << "How Many in your Party?";
				party.Size = ReadInt (); //assigning how big our party, party is the struct variable as defined in plane.h

				cout << "Enter Party Name >";
				party.Name = ReadString ();//assigning our party name


				plane = PlanesArray [Which]; //assigning plane struct, the Plane(Alpha/Bravo) we are loading
											//this allows us to continue values assignment in the correct location.


				cout << "Party Name is: " << party.Name << endl;
				cout << "Party Size is: " << party.Size << endl;
				cout << endl;

					if (plane.NumSeats < party.Size)
						{
	//------------------ 3) If Plane Requested is too small to hold the entire party, party is rejected - msg printed ----------
						cout << "Your Party is larger than the plane can hold, please re-register in smaller parties" << endl;
						}
					else if(plane.NumEmpty >= party.Size)
						{
	//------------------- 1) Party is Seated on Requested Plane - msg printed --------------------------

						plane.Parties [plane.NumParties] = party; //However many parties are on (ex:Bravo already,  assign our party struct to the plane Parties * array
						plane.NumParties++; //add one to NumParties, so if another is assigned it goes to the target location.
						plane.NumEmpty = plane.NumEmpty - party.Size; //seats are now taken.
						PlanesArray [Which] = plane;
						cout << "Please board " << plane.PlaneName << ", your flight will take off momentarily." << endl;
						}

					else if (Lounge.NumEmpty >= party.Size)
						{
	//---------------------2) If Plane Selected is full, party is directed to wait in lounge (if room) - msg printed
						plane = Lounge; //Lounge becomes the target for the party.
						plane.Parties [plane.NumParties] = party; //However many parties are on (ex:Bravo already,  assign our party struct to the plane Parties * array
						plane.NumParties++; //add one to NumParties, so if another is assigned it goes to the target location.
						plane.NumEmpty = plane.NumEmpty - party.Size; //lounge seats are now taken.
						cout << "The Plane cannot accommodate your party at this time," << endl;
						cout << "please feel free to enjoy our lounge facilities, you will be re-booked on a later flight." << endl;
						cout << "There are now " << plane.NumEmpty << " available spaces in the Lounge." << endl;
						Lounge = plane;
						}
					else
						{
	//-------------------- 3) If there is no room on the plane, and no room in the Lounge Either - msg printed sending away-------
							cout << "Thank You, Come again. There is not enough room on the plane or the lounge to accommodate your party at this time." << endl;
						}

				break;

		case CmdDisplay:
					cout << "Which Plane would you like to display? (0-Alpha, 1-Bravo, 2-Lounge) >";
					cin >> selection;
					switch (selection)
					{
					case 0: plane = Alpha;
						break;
					case 1: plane = Bravo;
						break;
					case 2: plane = Lounge;
						break;
					}
					cout << endl;
					Display (plane);


			break;
		case CmdShutdown:

			cout << "SHUTDOWN SEQUENCE TRIGGERED" << endl;

				// as long as people are on the plane (even if not full) or in the lounge
				// keep flying the plane as we did with the fly command
					// after everything is done flying and such, delete the array of parties for each plane.
					// delete [] Party;

			ShutdownLoop = true;

			break;
		case CmdInvalid:
					cout << "Invalid Command, try again" << endl;
					break;



		default:
				cout << "Internal error #1, contact customer support" << endl; //this is a common error message that people should never see
		}


//------------6 ) Auto Commands If a plane is Full Fly Plane, and Move Passengers in Lounge onto empty Plane-----------
	for (int i = 0; i < PlanesArraySize; i++) //for Loop to check all planes.
	{
		if (PlanesArray[i].NumEmpty == 0) //THE PLANE IS FULL FLY!
		{	cout << endl;
			cout << "FULL PLANE" << endl;
			cout << endl;

			plane = PlanesArray [i]; //flys only the full plane.
			FlyPlane (plane);
			PlanesArray [i] = plane; //reassigning plane to Array, because it was reinitialized.

			//NEXT INSTRUCTION - Move Parties from the Lounge to the Plane.
								//Only move parties that can fit into the number of available.
								// if party does not fit or wants the other plane, skip it
								// if the party fills up the plane, loop back and fly the plane again.


			for (int i = 0, j = 0; i < Lounge.NumParties; i++) //checks every party in the lounge
				{
				party = Lounge.Parties [i]; //identify larger parties to skip and move forward in que.
					if (party.Size > plane.NumEmpty) //if party is bigger than avaliable seats.
						{
						tempLounge.Parties [j] = Lounge.Parties [i];//assign to first location in priority que.
						tempLounge.NumParties++;
						tempLounge.NumEmpty = Lounge.NumEmpty - party.Size;
						cout << endl;
						cout << party.Name << " - Party is too large to board " << plane.PlaneName << " right now. You will be next to board from lounge."<< endl;
						j++; // go to next slot in tempLounge.
						}
					else
						{
						plane.Parties [plane.NumParties] = party; //However many parties are on (ex:Bravo already,  assign our party struct to the plane Parties * array
						plane.NumParties++; //add one to NumParties, so if another is assigned it goes to the target location.
						plane.NumEmpty = plane.NumEmpty - party.Size; //seats are now taken.
						cout << party.Name << " Has Boarded" << plane.PlaneName << " from Lounge"<< endl; //print Party name
						}

				}
			Lounge = tempLounge; // The New Lounge Becomes TempLounge.
			PlanesArray [i] = plane; //reload our plane array with current data.
			Flown = true;

		}
		else; //do nothing.
	}


cout << endl;
}while (!ShutdownLoop);



	return 0;
}

void InitPlane (Plane & P, int Size, char * PlaneNames){   //& we are passing by reference because we want to change things. Allows us to pass the STRUCTURE itself.
				P.PlaneName = PlaneNames;
				P.NumSeats = Size;
				P.NumEmpty = Size; //first time I show up, all the seats are empty.
				P.NumParties = 0;
				P.Parties =  new Party [Size]; //dynamic array of parties, maximum number of parties we can have is "Size".
				P.MaxParties = Size;

}


void Display (Plane & P){
	cout << P.PlaneName << ": ";
	cout << "  Seats: " << P.NumSeats;
	cout << "  Empty Seats: " << P.NumEmpty;
	cout << "  Parties Booked: " << P.NumParties << endl;

}

void FlyPlane(Plane & P){


			cout << endl;
			cout << P.PlaneName << " FLEW!" << endl;
			cout << endl;

			Party party;
			int Size;
			char * planeName;

			cout << "Parties OnBoard: " << endl;
	for (int i = 0; i < P.NumParties; i++) //prints for the number of parties on the plane.
				{
					party = P.Parties [i]; //target party assigned to party struct.
					cout << party.Name << endl; //print the party name.
				}

				//takes the existing plane and copies basic values..
				Size = P.NumSeats;
				planeName = P.PlaneName;
				delete [] P.Parties; // Clears the Dynamic Memory Array for Parties struct.
				InitPlane (P, Size, planeName); //Reinitializes that from scratch.

			cout << endl;
			cout << "A fresh plane has landed and is ready to board!" << endl;
			Display (P);
}

