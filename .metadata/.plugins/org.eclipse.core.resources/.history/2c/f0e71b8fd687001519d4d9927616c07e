/*
 * pBinarySearch.cpp
 *
 *  Created on: Nov 8, 2015
 *      Author: mbd06b
 */
#include <iostream>
#include "ReadString.h"
#include <string.h>
#include "pBinarySearch.h"
using namespace std;


int  Search (char * Array [], char * Query, int HowManyNames)
	{

		int	First; //is assigned 0 below
		int Middle; // is (first + last) divided by 2
		int Last; // last is how many names

		First = 0;
		Last = HowManyNames;


/*-------------------DATA CHECK-------------------------------

		cout << endl;
		cout << "Last is: " << Last;
		cout << ", Query is: "; cout << Query << " FuncCounter is: " << HowManyNames << endl;
		cout << ", Our Array is: ";
		for(int i = 0; i < HowManyNames; i++)
			{
				cout << Array [i] << ", ";
			}
		cout << endl;
		cout << endl;
----------------------------------------------------------------------*/
		int LoopCounter = 0;
		while (First < Last)   //when First is Larger than Last, the character we are searching for Does Not Exist
		{
		LoopCounter++;
		Middle = (First +  Last) / 2;
		cout << endl;
		cout <<" Loop Counter is:" << LoopCounter << " Middle is: " << Middle << endl;
		if (strcmp(Array [Middle], Query) == 0)//similar to (Array [Middle] == Query[0]) Array [Middle] == Query
			{
			return Middle; //if middle == our query, it means our value exists, so we return that integer.
			cout << " FOUND ";
			}

			else
				{
				if (strcmp(Query, Array[Middle]) < 0) //similar to ()  Query < Array [Middle]
					{
					Last = Middle - 1;
					cout << " Last is: " << Last;
					}

				else
					{
					First = Middle + 1;
					cout << " First is: " << First;
					}
				}

		}//END OF WHILE lOOP
			cout << " NOT FOUND " << endl;
			return -1;

	}


	/*	int ArrayLoc = 0;

		return (Array [], Query [0]);
#include "BinarySearch.h"

int BinarySearch (const char Array [], int SizeOfArray, char c)
{
	{
		int	First;
		int Middle;
		int Last;

		First = 0;
		Last = SizeOfArray - 1;
		while (First <= Last);   //when First is Larger than Last, the character we are searching for Does Not Exist
			{
			Middle = (First +  Last) / 2;
			if (Array [Middle] == c)
				return Middle;
			else
				if (c < Array [Middle])
					Last = Middle - 1;
				else
					First = Middle + 1;

			}
		return -1;
	}
}
	 *
	 *
	 */
