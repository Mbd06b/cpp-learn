/*
 * Name.h
 *
 *  Created on: Mar 28, 2016
 *      Author: mbd06b
 */

#ifndef NAME_H_
#define NAME_H_
#include "myStringclass.h"
#include <iostream>

using namespace std;

enum whichName {first, middle, last, enumEnd};

class Name {



	public:						Name (); //constructor
								Name (Name &); //copy


					String & 	getName		(const whichName); //enum whichName "first, middle, last"
					Name &      setName		(const String &, whichName); //enum whichName "first, middle, or last"
				/*
					Name &		sFirst		(const String &, whichName);
					Name &		sMiddle		(const String &, whichName);
					Name &		sLast		(const String &, whichName);
				*/
					void		Display 	();

					//operators
					void		    Read		(istream &);//method used to facilitate the read in '>>' operator.
			        Name & 	  operator = 	 (const Name &);



	private:
	String sFirst;
	String sMiddle;
	String sLast;



};

Name::Name(){ //values default set blank
	sFirst = ("");
	sMiddle = ("");
	sLast = ("");

}

Name::Name(Name & toCopy){
	sFirst = toCopy.sFirst;
	sMiddle = toCopy.sMiddle;
	sLast = toCopy.sLast;

}

Name & Name::setName (const String & str, whichName num){

	if(num == first){
	sFirst = str;
	}
	if(num == middle){
	sMiddle = str;
	}
	if(num == last){
	sLast = str;
	}
	return *this;
}




String & Name::getName(const whichName num){

	if(num == first){
	return sFirst;
	}

	else if(num == middle){
	return sMiddle;
	}
	else

	return sLast;

}

inline void Name::Display(){
	cout << sFirst << " " << sMiddle << " " << sLast;
}

Name & Name::operator = (const Name & toCopy){

	if(this != &toCopy){
	sFirst = toCopy.sFirst;
	sMiddle = toCopy.sMiddle;
	sLast = toCopy.sLast;
	}else;
	return *this;

}


#endif /* NAME_H_ */
